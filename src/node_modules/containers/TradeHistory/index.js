import React, { Component } from 'react'
import { connect } from 'react-redux'
// import PropTypes from 'prop-types'
import FontAwesomeIcon from '@fortawesome/react-fontawesome'
import faCog from '@fortawesome/fontawesome-free-solid/faCog'


import './index.css';
import { onGetTiker } from 'actions/tiker'
import { onGetTradeHistory } from 'actions/tradeHistory'
//Components
// import PagesList from 'components/Pages'


class TradeHistory extends Component {
  constructor() {
    super()

    this.state = {
      seletedCurrencie: '',
      seletedCoin: ''
    }
  }

  componentDidMount() {
    this.onGetTiker();
  }

  onGetTiker = () => {
    this.props.onGetTiker();
  }

  onGetTradeHistory = () => {
    const currencie = this.state.seletedCurrencie;
    const coin = this.state.seletedCoin;
    if ((currencie === '') || (coin === '')) {
      alert('You need to choose a currency and a coin!')
    } else {
      this.props.onGetTradeHistory(currencie, coin)
    }
  }

  handleSelectedCurrencie = (e) => {
    const currencie = e.target.value;
    this.setState({ seletedCurrencie: currencie })
  }

  handleSelectedCoin = (e) => {
    const coin = e.target.value;
    this.setState({ seletedCoin: coin })
  }

  render() {
    if (this.props.loading_Tiker) {
      return <div><FontAwesomeIcon icon={faCog} spin /> loading...</div>
    } else if (this.props.error_Tiker) {
      return <div>
        Error loading, you need to reload the pag: &nbsp;
        <button onClick={this.onGetTiker}>Reloading</button>
      </div>
    }

    return (
      <div>
        <br />
        <div>
          <label>Currencie: </label>
          <select onChange={this.handleSelectedCurrencie}>
            <option value=''>Select currency</option>
            {
              this.props.currencies.map((item, num) => {
                return <option key={num} value={item.name}>{item.name}</option>
              })
            }
          </select>

          &emsp;

          <label>Coin: </label>
          <select onChange={this.handleSelectedCoin}>
            <option value=''>Select coin</option>
            {
              this.props.currencies.filter(item =>
                String(item.name) === String(this.state.seletedCurrencie)
              ).map(currencie => {
                return currencie.coins.map(coin => {
                  return <option key={coin} value={coin}>{coin}</option>
                })
              })
            }
          </select>
        </div>

        <br />
        =====================================
        <br /> <br />

        {this.props.loading_TradeHistory ?
          <div>
            <button disabled>Get trade history</button>
            &nbsp;
            <FontAwesomeIcon icon={faCog} spin />
          </div>
          : (this.props.error_TradeHistory) ?
            <div>
              <button>Get trade history</button>
              &nbsp;
              Error occurred try again!
            </div>
            :
            <div>
              <button onClick={this.onGetTradeHistory}>Get trade history</button>
            </div>
        }

        <br />
        {this.props.tradeHistory.length ?
          <div>
            <table border="1">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Type</th>
                  <th>Rate</th>
                  <th>Amount</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                {
                  this.props.tradeHistory.map((item, num) => {
                    return <tr key={num}>
                      <td>{item.date}</td>
                      <td>{item.type}</td>
                      <td>{item.rate}</td>
                      <td>{item.amount}</td>
                      <td>{item.total}</td>
                    </tr>
                  })
                }
              </tbody>
            </table>
            <br />
            Count of trades: {this.props.tradeHistory.length}
          </div>
          :
          null
        }
        <br />
      </div>
    )
  }
}


// TradeHistory.propTypes = {
//   data: PropTypes.string,
// }


const mapStateToProps = (state) => ({
  loading_TradeHistory: state.tradeHistory.loading,
  error_TradeHistory: state.tradeHistory.error,
  tradeHistory: state.tradeHistory.data,
  loading_Tiker: state.tiker.loading,
  error_Tiker: state.tiker.error,
  tiker: state.tiker,
  currencies: state.tiker.currencies,
})

const mapDispatchToProps = ({
  onGetTradeHistory,
  onGetTiker
})

export default connect(mapStateToProps, mapDispatchToProps)(TradeHistory);
